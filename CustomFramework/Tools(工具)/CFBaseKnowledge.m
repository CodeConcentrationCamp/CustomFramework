//
//  CFBaseKnowledge.m
//  CustomFramework
//
//  Created by binbin on 2019/2/26.
//  Copyright © 2019 cbb. All rights reserved.
//

#import "CFBaseKnowledge.h"

@implementation CFBaseKnowledge


/** 基础知识点 */

/**
值类型 -- 引用类型   区别
1. 值类型变量声明后，不管是否已经赋值，编译器为其分配内存。
2. 引用类型当声明一个类时，只在栈中分配一小片内存用于容纳一个地址，而此时并没有为其分配堆上的内存空间。当使用 new 创建一个类的实例时，分配堆上的空间，并把堆上空间的地址保存到栈上分配的小片空间中。
3. 值类型的实例通常是在线程栈上分配的（静态分配），但是在某些情形下可以存储在堆中。
4. 引用类型的对象总是在进程堆中分配（动态分配）。
 
 */

/**
 ######  数据类型  #####
assign -- weak -- unsafe_unretained
 
strong -- retain -- copy

 */

/**
 ###### 沙盒的目录结构（文件系统目录） ######
 1.沙盒
 Documents   保存应用运行时生成的需要持久化的数据   游戏进度   该目录会被iTunes 同步备份
 Libaray
 --Caches    保存应用运行时生成的需要持久化的数据  不同步  一般是 缓存图片，离线h数据
 --Preferences  保存应用所有偏好设置  同步iTunes
 temp         运行时候的 临时数据 使用完毕后删除
 
*/

/**
 ###### 内存的区域划分 ######
 ·····
 栈区
  由系统自动分配和释放  存放局部变量的值
 容量小 速度快 有序
 ·····
 堆
 一般由程序员分配和释放  如果不释放，则出现内存泄漏 程序回收内存
 容量大  速度慢  无序
 ·····
 静态存储区
 局部变量和静态变量都存放在静态区域  程序结束 系统收回
 ·····
 常量区
 存放常量的内存区域  程序结束 系统收回
 ·····
 代码区
 存放二进制代码的区域
*/

@end
